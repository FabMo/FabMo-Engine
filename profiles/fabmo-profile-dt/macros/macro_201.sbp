'!FABMO!name: STANDARD FABMO MACRO VARIABLES
'!FABMO!description: Set Values for Standard Variables used in many Macros
'   2022/03/10 - Refactored (th)
'   Standard Macro Variables are defined and read from Macro #201 (variables are stored as persistent)
'
'Standard variables for ShopBot-FabMo "Macros" are a defined subset of "persistant" variables available within FabMo.
'- They are tool-specific and are included in the tool default profile.
'- All Macros are written in OpenSBP so all variables are SBP "variant" type (numbers and strings).
'- The idea here is to keep the Macros and variable names the same for all tools, only adjusting the values for tool type.
'
'Naming System is: "$sb_" as identifier and camelCase with _X(axis letters) for axis specific items. 
'- UNDERSCORES need to be used as spacers as hyphen's don't currently work in SBP files.
'- FOR MOST MACROS these standard variable are read and converted to a local variable for use in Macro
'- THE UNIT SYSTEM allows using either INCH values or MM values and these are handled in Macros no matter
'    the current UNIT TYPE of the tool.
'
'Standard Macro File Format:  (for all relatively complex macros, to give a similar flow)
'        - Main Program Sequence :: calling program function subroutine with GOSUBs
'        - Primary Subroutines
'              = Major subs
'              = Error checks and handling
'              = initialize_variables:
'                     * makes a local version of the standard variable to prevent corruption
'                     * handles conversion to tool measurment mode based on unit of variable 
'
'Shipping:
'- Only ship a tool with one profile -- it's own appropriate profile (installed at the final test of tool)! 
'* - FUTURE: Default profile not offered as an option and will be used only if no profile present.
'* - FUTURE: Default only be used by FabMo developers and as template for specific tools.
'* - FUTURE: A VariableManager app should allow inspection and editing of variables in profiles. For the moment, just edit and run this macro.
'* - NOTE: That a users configuration values may me saved to the client device and reloaded at any time. This does not inlcude Macros! 
'
'Further Note! These variables can be used and modified in any OpenSBP format part file or Macro
'-   They are only immutable in the sense that they are initially defined when the profile is installed and persist from session to session (i.e. not constants).
'-   If even in doubt, RE-RUN MACRO#201 !
'* - QUESTION: Should these be re-read before every macro, and/or read at startup to give more permanence?
'Further Note 2: Macros are text files. Currently the simplest method to copy a custom macro is just cut and paste into a text document using
'     ... using the the editor. A macro can also be submitted/saved as a job and downloaded.

' ----------------------------------------------------------------
$sb_standard_variables_PRESENT = 0  '- flags that this variables table has been read when it is set to 1 at end
$sb_varTableUNITS        = "IN"     '- (everywhere) IN;MM Table can be in INCHEs or MMs
                                    '-  but distance and speed values must be a consistent UNIT !!!
$sb_hasBeenZeroed        = 0        '-  flag for whether we have been zeroed since starting or faulting; NEEDS TO BE ENABLED RYAN

$sb_proxNum_X            = 3        '- (m3,?)  ... usually input 2 or 3; if using as system var; number = Input# + 50 
$sb_proxNum_Y            = 3        '- (m3,?)  ... usually input 2 or 3
$sb_proxNum_Z            = 3        '- (m2,m3,?) ... usually input 2 or 5
'$sb_proxNum_A
'$sb_proxNum_B
'$sb_proxNum_C
'$sb_laserOnNum
'$sb_laserPWMnum
$sb_proxType             = 0        '- 0=normally-open; 1=normally-closed (tools consistently use one or the other)
'Derived Switch Values:				'- for convenience, pre-compute switch "system numbers" needed for switch reads (equals # + 50)
$sb_proxCk_X = $sb_proxNum_X + 50
$sb_proxCk_Y = $sb_proxNum_Y + 50
$sb_proxCk_Z = $sb_proxNum_Z + 50

$sb_homeOff_X            = 0.5      '- (m2,m3) back off a prox to Home location 
$sb_homeOff_Y            = 0.5      '- (m2,m3) back off a prox to Home location
$sb_homeOff_Z            = 0.15     '- (m2,m3) back off a prox to Home location
'$sb_homeOff_A
'$sb_homeOff_B
'$sb_homeOff_C

$sb_searchSpeed_XY       = 2.5      '- (m2,m3,?)
$sb_searchSpeed_Z        = 2.5      '- (m2,m3,?)
$sb_searchSpeed_Zzero    = 0.5      '- (m2) don't want any extra steps into plate
'$sb_searchSpeed_A
'$sb_searchSpeed_B
'$sb_searchSpeed_C
$sb_slowSearchSpeed_XY   = 0.5      '- (m2,m3,?)
$sb_slowSearchSpeed_Z    = 0.25     '- (m2,m3,?)
'$sb_slowSearchSpeed_A
'$sb_slowSearchSpeed_B
'$sb_slowSearchSpeed_C
$sb_searchDist_X         = 26       '- (m2,m3,?)
$sb_searchDist_Y         = 20       '- (m2,m3,?)
$sb_searchDist_Z         = 6        '- (m2,m3,?)
'$sb_searchDist_A
'$sb_searchDist_B
'$sb_searchDist_C
$sb_ooch                 = .05      '- distance used for pull backs and target adjustments, scaled to tool type

$sb_zZeroNum             = 1        '- (m2,?) ... usually 1; if using as system var; number = Input# + 50
$sb_zPlateOff            = 0.5      '- (m2) offset for move from plate distinguishing pull back from Zprox and ZeroPlate
$sb_zPlateThick          = 0.118    '- (m2,?)
$sb_zPlateType           = "STD"    '- PRESS; 3D; STD ... use this eventually to select type
'  - 0.118" for std plate, your plate may be slightly different
'  - To instead use ShopBot/Handibot pressure plate, change $sb_ZZeroNum to 5, and
'    ... adjust plate thickness to 0.57, and
'Derived Plate Value:				'- for convenience, pre-compute switch "system" number needed for input read (equals # + 50)
$sb_zZeroCk = $sb_zZeroNum + 50
$sb_current_cutter_Zoffset = 0      '- (m2,m3,m9,m78) ... some set-ups may not use these two, but variables should exist
$sb_current_cutter_Zoffset_Units = "IN" '- (m2,m3,m9,m78) ... IN or MM; can be set in different places so we need to track units


' MTC (Manual Tool Change) Behaviors
$sb_MTCmode              = "IGNORE" '- (m9) IGNORE; QUIT; MTC ... defaulting to IGNORE for moment
$sb_MTC_XY_mode          = "FIXED"  '- (m9) FIXED; STAY where to do tool change
$sb_MTC_Z_mode           = "FIXED"  '- (m9) MAX; FIXED method pull-up
$sb_MTC_Zero_mode        = "MACRO"  '- (m9) MACRO; or, DRO keypad manual method to zero Z
$sb_MTC_skip_first       = "NO"     '- (m9) NO; YES ... add to DT Util? do we really want this?
$sb_changePos_X          = 4        '- (m9) for fixed location of a change
$sb_changePos_Y          = 4        '- (m9) for fixed location of a change
$sb_changePos_Z          = 1        '- (m9) for fixed location of a change; going to need to do a height check to prevent crashes here
$sb_TOOLcurrent          = 0        '- (m9) for manual and ATC changes

$sb_dtType               = 3        ' 2=DTmax; 3=DT3
$sb_squaringMove         = .75      '- (m10) for Desktops  
$sb_squaringJerk         = 1000     '- (m10) for Desktops

'$sb_ATCtype       - our macros have been using ...?
'$sb_TOOLtype      - DT types were 2=DTMAX 3=DT3 need todefine others
'... other ATC needed variables, like: ?
'$sb_tool_change_x
'$sb_tool_change_y
'$sb_tool_change_safe_z
'$sb_tool_change_z

$sb_X_park               = 12
$sb_Y_park               = 8
$sb_Z_park               = 1.0
'$sb_A_park
'$sb_B_park
'$sb_C_park

'DO we need a separate special home?
$sb_home_X               = 0         '- (m3) this would be a special offset from 0,0; only a value if using it
$sb_home_Y               = 0         '- (m3) this would be a special offset from 0,0; only a value if using it

$sb_safe_Z               = %(28)     'Temporary retreival from system vars ... see note below

$sb_standard_variables_PRESENT = 1   'CONFIRM ALL READ.
PAUSE "Standard Macro Variables Read  Confirm => " + $sb_standard_variables_PRESENT


'* - FUTURE: ShopBot V-Carve posts currently write an IF statement at the top of file that tests whether file measurement UNITS match current measurement UNITS of tool>
'        ... If not, it sends control to Macro#91 for user Notification, and ends file.
'        ... We may want to consider changing this because FabMo can handle disparate units if units are defined at start with OpenSBP or g-code.
'* - FUTURE: We may want to have a "Restore Default Standard Variables for this Profile" in case the table gets messed up. At the moment, it is good to make a copy
'        ... of a users working Configuration from Config Manager. 
'* - FUTURE: Need method for user to save custom macros and macro sets versions and modify profile or access additional profiles from github; store outside FabMo on server?
'* - FUTURE: Should macros/sbp have access to config var's as well as system var's, e.g. tool size?
'* - FUTURE: SD-Image could have tabulated universal tool info. Use it to get correct tool profile from SbWebsite w/serial number or QR code?
'* - FUTURE: We should have a sb_safe_Z variable that is consistent with VC and with g2! Just read it here and make redundant?
'* - FUTURE: Allow hyphens in sbp var names?
