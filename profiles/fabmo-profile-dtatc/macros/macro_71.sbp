'!FABMO!name:ATC Toolchange - internal
'!FABMO!description:- internal -
'!FABMO!enabled:true
' ATC Toolchange; Core routine for swapping out tools
' ... this called by C1(user), or by C?, C?. C? 
' FabMo Version from 12/15/24
' Brian Owen, Josh Ayres
' edited: TH, 12/21/24

'??? I don't understand SPECIAL so I have not implemented anything yet ???


' Initialize ------------------------------------------------------------------------------------------
 C75                                         ' Load primary ATC variables and ck status
 JS, $XYJOG, $ZJOG                           ' Set Jog speed for approaches (are units right here and following ???)              .
 &ATC_safeclear = -1 * %(9) - $smallBackOff
 &th := 0                                    ' These need predefined only for STATE Display
 &MANUAL_CHANGE := 0
 

' MAIN ==================================================================================================
        ' (comment-in or -out DIAGNOSTIC REPORTS; using "gosub STATE")

        GOSUB StartATCsequence  '  Initialize the ATC work
            &AtNow = "Pre-Start"
            'gosub STATE
        IF &MANUAL_CHANGE == 0 THEN GOSUB NormalChange
        IF &MANUAL_CHANGE > 0 THEN GOSUB ManualChange 
            &AtNow = "Pre-FINISH"
            'gosub STATE
        GOSUB FinishToolChange
            &AtNow = "Pre-END"
            'gosub STATE
        END
    
    '----------------------------------------------------------------------
        ' MODULE FOR NORMAL CHANGE
            NormalChange:
                        &AtNow = "Pre-STASH Ck-NORMAL"
                        'gosub STATE
                    GOSUB StashTool
                        &AtNow = "Pre-GRAB Ck-NORMAL"
                        'gosub STATE
                    GOSUB GrabTool
                RETURN
                
        ' MODULE FOR MANUAL CHANGE
            ManualChange:
                'maybe theres a way for a regular STASH and GRAB with early exits, then could have one method
                    IF MANUAL_CHANGE < 2 THEN GOSUB StashTool         ' >> Remove a regular tool
                        &AtNow = "Pre-STASH Ck-MANUAL"
                        gosub STATE
                    GOSUB ManualStash_Tool
                        &AtNow = "Post-STASH Ck-MANUAL"
                        gosub STATE
                    GOSUB GrabTool
                        &AtNow = "Post-GRAB Ck-MANUAL"
                        gosub STATE
                    GOSUB ManualGrab_Tool

                RETURN

    
    '---------------------------------------------------------------------
' =======================================================================================================

' Primary Subroutines -----------------------------------------------------------------------------------

StartATCsequence:
    JZ, &ATC_safeclear                                                ' >> Pull up as initial move indicating
    IF &tool == $ATC.ToolIN THEN GOSUB Same_Tool                      ' >> Bail on this 
                                                                      ' (?) >> What is protocol for having a manual tool in spindle; could be undefined or # above ??
    IF &tool < 0 THEN &MANUAL_CHANGE = 1                              ' 
    IF &tool > $ATC.NumClips THEN &MANUAL_CHANGE = &MANUAL_CHANGE + 2 ' (?) (would we want to use 3 for something?)
    IF $ATC.ToolIn >= 1000 THEN GOSUB Special_Tool                    ' (?) I don't understand what this is yet
    IF $ATC.Status == "OK" THEN RETURN
    $ATC.Status = "EMPTY"  ' ??are we automatically empty here??                                           ' (?) spindle is empty; should we have checked this out?
    IF $ATC.Status == "EMPTY" THEN GOSUB SetTool0  'get dummy values for no-tool
    RETURN

StashTool: '  PUT A TOOL BACK INTO ITS CLIP if necessary
    ' For the current tool, copy into a set of operative variables the exact location of its clip, REMOVING ...
    ' ... any working offsets and offsets of 0 from homing prox switches!
    &tx = $tools[$ATC.ToolIn].X - %(7) + $sb_homeOff_X * $unitMultiplier
    &ty = $tools[$ATC.ToolIn].Y - %(8) + $sb_homeOff_Y * $unitMultiplier
    &tz = $tools[$ATC.ToolIn].Z - %(9)
    &th = $tools[$ATC.ToolIn].H + 0
    &Z_OFFSET = %(9)- (&th + $ATC.PlateOffset)
    &sx = $tools[$ATC.ToolIn].X + $ATC_clipSafe - %(7)
    IF $ATC.ToolIN == 0 THEN RETURN  ' Nothing to stash so we'll return 

    ' BEGIN Physical STASH
        'IF %(1)< &sx THEN JX, &sx                                  ' (?) what is this about? why do we need to bother??
        J2, &sx, &ty                                                ' >> Move to safe spot in front of intended clip
        JZ, &tz                                                     ' >> Jog to Z height for intended clip 
        JX, &tx + $ATC_clipSafe / 4                                 ' >> Move partway in ...              ?? partially in; opening now why ??
        SO, $DrawBar, 1                                             ' >> Open toolholder chuck            ?? opening now ??
        MX, &tx                                                     ' >> Final Move into clip
        IF %($Drawbar_Sensor_Status)== 0 THEN GOTO BAR_NOT_OPEN      ' >> Ck draw bar -- it should be OPEN!                  --ELSE ERROR!--
        JZ, %(3)+ $thClearance * 2                                  ' >> Pull up to twice the clearance height for toolholder
        SO, $DrawBar,0                                              ' >> And Close the toolholder chuck
        &ATC_safeclear = -1 * %(9) + $Transit_Height                 ' >> Define a safe transit height     ?? why are we doing this here ??
        JZ,&ATC_safeclear                                           ' >> Jog to safe transit height
        IF %($Tool_Sensor_Status)== 1 THEN GOTO TOOL_RELEASE_ERROR  ' >> Ck to confirm tool not stuck in spindle            --ELSE ERROR!--
        $ATC.ToolIN = 0                                             ' >> NOw there is No Tool!
        RETURN

GrabTool: '  REMOVE A TOOL FROM ITS CLIP
    &COUNT = 0                                                      ' (?) zero these for error counting; not implemented yet
    &BIGCOUNT = 0
    IF &MANUAL_CHANGE > 0 THEN RETURN                               ' (?) DOES A MANUAL CHANGE USE MEASURED TOOLS
    IF &tool == 0 THEN $ATC.Dropped = 1
	IF &tool == 0 THEN RETURN                                        ' (?) Putting away and Leaving the spindle EMPTY
     
    &th = $tools[&tool].H                                           ' >> Get the tool length for new tool and other data ...
    &new_curZ = %(3)- ((&th + $ATC.PlateOffset) + &Z_OFFSET - %(9)) ' >> ... update Z based on current offset and length ... 
    VA,,,&new_curZ                                                  ' >> ... set it with VA
    &tx = $tools[&tool].X - %(7) + $sb_homeOff_X * $unitMultiplier   ' >> then the working clip location for the new tool 
    &ty = $tools[&tool].Y - %(8) + $sb_homeOff_Y * $unitMultiplier
    &tz = $tools[&tool].Z - %(9)
    &sx = $tools[&tool].X + $ATC_clipSafe - %(7)

    ' BEGIN Physical Grab
        JZ, &ATC_safeclear                                         ' >> Should already be here; just in case jog to safe transit height
        J2, &tx, &ty                                               ' >> ... move to the clip location 
        JZ, &tz + $thClearance * 2                                 ' >> Get clear in Z then 
        SO, $DrawBar,1                                             ' >> Open toolholder chuck
        MZ, &tz                                                    ' >> ## Move Onto Toolholder ##
        SO, $DrawBar,0                                             ' >> Close toolholder chuck
        PAUSE 0.25                                                 ' >> Pause for toolholder to close
        If %($Drawbar_Sensor_Status) == 1 Then GOSUB BAR_STUCK_ERROR' >> Ck draw bar -- it should have CLOSED!              --ELSE ERROR!--
        MX, &tx + $ATC_clipSafe / 4                                ' >> Gently move out a tad ...
		$ATC.Dropped = 0 
        PAUSE 0.1
        JX, &tx + $ATC_clipSafe                                    ' >> ... then finish move outside front of clip
        JX, &sx
        &ATC_safeclear = -1 * %(9) - $smallBackOff
        JZ, &ATC_safeclear
    RETURN

FinishToolChange:
    ' (?) Do we want to better manage putting all the tools away?
    JZ, &ATC_safeclear
    JX, &sx + $ATC_clipSafe
    '$ATC.Dropped = 0
    &ATC_safeclear = -1 * %(9) - $smallBackOff
    JZ, &ATC_safeclear
    $ATC.ToolIN = &tool
    &TL = &th + $ATC.PlateOffset + $ATC.MaxDepth
    VL,,,,,&TL                                                     ' (?) changing for limits???
    RETURN

' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
STATE: ' Report State at points in ATC Sequence
    PAUSE "STATE:" + &AtNow + " ATC-Status:" + $ATC.Status + " tool:" + &tool + " ATC.Dropped:" + $ATC.Dropped + " ToolIn:" + $ATC.ToolIn + " Length:" + &th + " Manual:" + &MANUAL_CHANGE + " Drawbar:" + %($Drawbar_Sensor_Status) + " ToolSensor:" + %($Tool_Sensor_Status)
    RETURN
' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

' Special Cases -----------------------------------------------------------------------------------------
SetTool0:
        &AtNow = "Spindle set EMPTY"
        'gosub STATE
    &tx = $tools[0].X - %(7)
    &ty = $tools[0].Y - %(8)
    &tz = $tools[0].Z - %(9)
    &th = $tools[0].H
    &sx = $tools[0].X + $ATC_clipSafe - %(7)
    RETURN

Same_Tool:
    &ATC_safeclear = -1 * %(9)- $smallBackOff
    JZ, &ATC_safeclear
    PAUSE "Requested Tool seems to already be in Spindle! (ToolIn:" + $ATC.ToolIN + ")", OKTEXT="Continue for suggestions ...", CANCELTEXT="Quit"
    PAUSE "Maybe try requesting a different tool or resetting the current ATC.ToolIN ..."
    END  
    RETURN

ManualStash_Tool:
  PAUSE "Ready for a manually REMOVE Tool #" + $ATC.ToolIN
  J2, $manual_change_X - %(7), $manual_change_Y - %(8)
  PAUSE "Press green button on gantry to remove current tool. (M-0139)"
  IF %($Tool_Sensor_Status)== 1 THEN GOSUB TOOL_NOT_REMOVED
  $ATC.Dropped = 1
  RETURN

ManualGrab_Tool:
  PAUSE "Ready to manually INSERT Tool #" + $ATC.ToolIN
  J2,$manual_change_X - %(7),$manual_change_Y - %(8)
  PAUSE "Press green button on gantry and insert tool"
  $ATC.Dropped = 0
  RETURN
  
Special_Tool:
    '  C79 'Special Tool Change?
    '  If &SpecialError = 1 Then GoTo SpecialError
    '  If $ATC.ToolIn >= 1000 Then GoTo ZeroToolDrop
    '  If &tool >= 1000 Then GoTo Finish_ToolChange
    '  GoTo SpecialError
    PAUSE "Special Tool ???"
    RETURN
  

' ERROR HANDLING ----------------------------------------------------------------------------------------
TOOL_NOT_REMOVED:
  DIALOG "Tool removal failed. Check the sensor and try again.", CANCELTEXT = "Quit"
  END

BAR_NOT_OPEN:
  DIALOG "Tool-Bar is not open!", CANCELTEXT = "Quit"
  END

TOOL_RELEASE_ERROR:
  DIALOG "Tool not released!", CANCELTEXT = "Quit"
  END

BAR_STUCK_ERROR:
  DIALOG "Tool not released!", CANCELTEXT = "Quit"
  END

ATC_ERROR:
  DIALOG "Problem with ATC, remove tool and re-home machine.", CANCELTEXT = "Quit"
  END

' DICTIONARY ===========================================================
'   h,H                         ( H = general reference to the measured length of a tool )

' -temporary variables--------------------------------------------------
'   &tool                     - this is the current tool number with the value brought in from Macro1, 72,74,??
'   $sb_homeOff_X,Y,Z         - offsets from prox switch to table base 0, why here???
'   &tx,y,z                   - clip locations of current tool, exactly from prox)
'   &th                       - measured lenth of current tool
'   &sx                       - safe X location in front of clip for current tool
' 
'   &MANUAL_CHANGE            - A MANUAL_CHANGE (=1) can be requrested from where?
'   &Z_OFFSET                 - (?)
'   &ATC_safeclear            - (?)  
'   &Status =                 - NOT USED anymore ??? same as %($Drawbar_Sensor_Status)
'   &new_curZ                 - (?)
'   &COUNT                    - (?) used for counting errors to 3
'   &BIGCOUNT                   (?)  ""  to 3 x 3

' -permanent variables---------------------------------------------------
'   $Drawbar_Sensor_Status    - SysVar# for Drawbar_Sensor (50 + #8 on DT-MAX)
'   $Tool_Sensor_Status       - SysVar# for Tool Presence Sensor (50 + #7 on DT-MAX)
'   $ToolBar_Status           - SysVar# for Presence of ATC Bar and Clips (50 + #6 on DT-MAX)
'
'   $thClearance              - (?)
'   $smallBackOff             - (?)
'   $Transit_Height           - (?)
'   $XYJOG, $ZJOG             - (?) Jog Speeds for ATC Approach ??should these be ATC variables??

' -atc-specific variables------------------------------------------------
'   $ATC_clipSafe             - (?) 
'	$ATC.ToolIN               - Current tool in the spindle; 0=no-tool, <0=set-manual, >toolNumber=set, >1000 special case? 
'   $ATC.Stautus              - (?) (possible values and significance "EMPTY" "OK" 
'   $ATC.PlateOffset
'   $ATC.Dropped              - ATC.Dropped =1; means spindle should be empty and %($Tool_Sensor_Status)=0
'                             - ATC.Dropped =0; means spindle should be loaded with something %($Tool_Sensor_Status)=1 and ATC.ToolIn >0 and =< numberOfTools

'   $tools[&tool].X   (the clip location of a tool)
'   $tools[&tool].Y
'   $tools[&tool].Z
'   $tools[&tool].H  (the measured cutter length of a tool)

' -system variables-(used for atc)----------------------------------------
'   %(7,8,9)                  - Current offsets from 0 for X,Y and Z axis (same as g55x,y,z)
'   %($Drawbar_Sensor_Status) - Drawbar OPEN=1 (active); Drawbar CLOSED=1 (normal mechanical state)
'   %($Tool_Sensor_Status)    - 1=tool-present; 0=no-tool-present 

