#!/usr/bin/perl -w

sub logmsg {
    $arg = shift;
    system("/usr/bin/logger \"$arg\"");
}
logmsg("collect_and_export_data_to_usb_drive launched");
sleep(2);

logmsg("collect_and_export_data_to_usb_drive entering collection");

if (scalar(@ARGV) < 1) {
    print(STDERR "ERROR:\tmissing parameter\n\tUsage: $0 {path to usb disk}\n\n");
    exit(-1);
}
my $USB_DRIVE_PATH = $ARGV[0];

system("echo $USB_DRIVE_PATH > /home/pi/testing/path.txt");

### https://www.perltutorial.org/

#### This program is meant to be extensible
#### This program will be invoked once when a usb drive in inserted
#### This program will receive mount point of the first USB disk
#### as a parameter. If any function needs to look beyond the first 
#### USB drive, then it will have to find any other disks it is 
#### interested in.

#### Current approach to how this works. There is a dictionary/hash/map
#### of files that can appear on the usb disk where the "key" is the 
#### name of the file that should appear on the usb drive to trigger 
#### some action and the "value" is a reference to the function that
#### should be executed if that key is present.

## Data to drive what we do. ##########################################
my %work_index;
#            filename      = workfunction reference
$work_index{'network.txt'} = \&capture_network_info;
$work_index{'shopbotsupport.txt'} = \&capture_shopbotsupport_info;


## Work functions ##########################################

sub capture_network_info() {
	my $target_file = shift(@_); #grab the parameter:w
	system("/usr/bin/touch $target_file");
	my $eth0 = `/sbin/ifconfig eth0 | /bin/grep "inet " | /bin/sed "s/inet/ip address/" | /usr/bin/cut -c 9-`;
        my $network =  `/sbin/ifconfig`;
	my $message ="\\nYour ShopBot Tool's networking information is listed below\\n" .
                     '\\n==================== eth0 ====================\\n\\n' .
                     '            vvvvvvvvvvv\\n' .
                     $eth0 .  
                     '            ^^^^^^^^^^^\\n' .
	             '\\n\\n================ Full Network ================\\n'  .
                     $network;
	system("echo \"$message\" > $target_file");
	logmsg("$message");
}

sub capture_shopbotsupport_info() {
	my $target_file = shift(@_); #grab the full file path parameter
	my $path_to_file= shift(@_); #grab the path parameter
	system("/bin/cp /var/log/daemon.log /home/pi/daemon.log; /bin/cp /var/log/syslog /home/pi/syslog");
	system("cd /home/pi; /usr/bin/zip /home/pi/shopbotsupport.zip daemon.log syslog");
	system("/bin/cp /home/pi/shopbotsupport.zip $path_to_file/shopbotsupport.zip");
	system("cd /home/pi; /bin/rm daemon.log syslog shopbotsupport.zip");
	my $message = "Your tech support info is recorded in shopbotsupport.zip on this device";
	system("echo \"$message\" > $target_file");
	logmsg("$message");
}

## pseudo main() that loops through the work_index and calls needed functions ##

## main()

## If we write to the usb drive, we will end by unmounting it; otherwise, we'll
## leave it alone. This flag helps manage that.
my $must_umount_flag = 0;

@files = sort(keys(%work_index));
for my $file (@files) {
    my $fullpath = "$USB_DRIVE_PATH/$file";
    logmsg("testing trigger: $fullpath");
    if (-e $fullpath) {
        logmsg("processing $fullpath");
        $work_index{$file}("$fullpath", "$USB_DRIVE_PATH");
	$must_umount_flag = 1;
    } else {
        logmsg("No trigger for: $fullpath");
    }
} 
sleep(5);
if ($must_umount_flag) {
	system("/bin/umount $USB_DRIVE_PATH");
}

