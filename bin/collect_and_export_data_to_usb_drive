#!/usr/bin/perl

use warnings;
use strict;
use File::Temp;

my $TEMP             = File::Temp->newdir();
my $REPORT_ID        = build_report_id();
my $REPORT_BUILD_DIR = $TEMP . "/" . $REPORT_ID;
mkdir($REPORT_BUILD_DIR);

logmsg("collect_and_export_data_to_usb_drive launched");
sleep(2);

logmsg("collect_and_export_data_to_usb_drive entering collection");

if ( scalar(@ARGV) < 1 ) {
    print( STDERR
          "ERROR:\tmissing parameter\n\tUsage: $0 {path to usb disk}\n\n" );
    exit(-1);
}

my $USB_DRIVE_PATH = $ARGV[0];

### https://www.perltutorial.org/

#### This program is meant to be extensible
#### This program will be invoked once when a usb drive in inserted
#### This program will receive mount point of the first USB disk
#### as a parameter. If any function needs to look beyond the first
#### USB drive, then it will have to find any other disks it is
#### interested in.

#### Current approach to how this works. There is a dictionary/hash/map
#### of files that can appear on the usb disk where the "key" is the
#### name of the file that should appear on the usb drive to trigger
#### some action and the "value" is a reference to the function that
#### should be executed if that key is present.

## Data to drive what we do. ##########################################
my %work_index;

#            filename      = workfunction reference
$work_index{'network.txt'}        = \&capture_network_info;
$work_index{'shopbotsupport.txt'} = \&capture_shopbotsupport_info;

## Work functions ##########################################

sub capture_network_info() {
    my $target_file    = shift;
    my $usb_drive_path = shift;
    my $data           = collect_ifconfig();
    write_file( $data => $target_file );

    logmsg($data);
    write_fabmo_html($usb_drive_path);
}

sub write_fabmo_html {
    my $usb_drive_path = shift;
    my $ip             = get_my_ip();
    my $fabmo_html     = <<"EOF";
<html>
<body>
<p>
<br/>
<h1> Click on this link in your browser to access FabMo: <a href="http://@{[$ip]}"> FabMo </a> </h1>
or copy and paste this to your browser address bar: <b>http://@{[$ip]}</b>
</p>
<p>
Once you have FabMo open on your tool, you will probably want to create a bookmark in your browser to make returning to FabMo easier.
</p>
</body>
</html>
EOF

    write_file( $fabmo_html => "$usb_drive_path/fabmo.html" );
}

sub get_my_ip {
    my $ip = `/bin/ip -f inet addr show eth0`;

    # Grab the first IP out of the results.
    $ip =~ s/^.*?inet ([0-9.]+).*$/$1/ms;
    return $ip;
}

sub collect_ifconfig () {
    my $network = `/sbin/ifconfig`;
    my $eth0    = get_my_ip();

    my $message = <<"EOF";
Your ShopBot Tool's networking information is listed below

Your FabMo Network Address is:

@{[$eth0]}

================ Full Network ================
@{[$network]}
EOF
    return ($message);
}

sub capture_shopbotsupport_info() {
    my $target_file  = shift;
    my $path_to_file = shift;

    # capture networking info to file
    write_file( collect_ifconfig() => "$REPORT_BUILD_DIR/ifconfig_out.txt" );

    my $message  = "System Status:";
    my @commands = (
        '/bin/df /dev/mmcblk0p1',
        '/usr/bin/top -b -n1',
        '/bin/ping -c 3 8.8.8.8',
        '/bin/cat /etc/resolv.conf',
        '/usr/bin/sudo /bin/systemctl status fabmo',
        '/usr/bin/sudo systemctl status fabmo-updater',
        '/usr/bin/sudo apt list --installed',
    );

    foreach my $cmd (@commands) {
        $message .= "\n$cmd\n" . "=" x length($cmd) . "\n\n";
        $message .= `$cmd 2>&1`;
        $message .= "\n\n\n";
    }
    write_file( $message => "$REPORT_BUILD_DIR/system_status.txt" );

    #capture logs
    my $currentFabmoLogFileName =
      `ls -t /opt/fabmo/log/*.txt | /usr/bin/head -1`;
    chomp($currentFabmoLogFileName);
    my @logfiles =
      ( "/var/log/daemon.log", "/var/log/syslog", $currentFabmoLogFileName );
    foreach my $logfile (@logfiles) {
        system( "/bin/cp", $logfile, $REPORT_BUILD_DIR );
    }

    my $dmesg = `/usr/bin/sudo /bin/dmesg`;
    write_file( $dmesg => "$REPORT_BUILD_DIR/dmesg" );

    chdir($TEMP);
    system( "/usr/bin/zip", "--recurse-paths", "--quiet", "shopbotsupport.zip",
        $REPORT_ID );
    system( "/bin/cp", "shopbotsupport.zip",
        "$path_to_file/shopbotsupport.zip" );

    # tell the user where to look for zip file
    my $readme_info =
      "Your tech support info is recorded in shopbotsupport.zip on this device";
    write_file( $readme_info => $target_file );
    logmsg($readme_info);
}

## pseudo main() that loops through the work_index and calls needed functions ##

## If we write to the usb drive, we will end by unmounting it; otherwise, we'll
## leave it alone.
my $unmount_when_done = 0;

my @files = sort( keys(%work_index) );
for my $file (@files) {
    my $fullpath = "$USB_DRIVE_PATH/$file";
    logmsg("testing trigger: $fullpath");
    if ( -e $fullpath ) {
        logmsg("processing $fullpath");
        $work_index{$file}( $fullpath, $USB_DRIVE_PATH );
        $unmount_when_done = 1;
    }
    else {
        logmsg("No trigger for: $fullpath");
    }
}
sleep(5);

if ($unmount_when_done) {
    system( "/bin/umount", $USB_DRIVE_PATH );
}
chdir("/");

exit(0);

sub write_file() {
    my $data = shift;
    my $file = shift;
    my $fh;
    logmsg("data == " . $data);
    logmsg("file == " . $file);
    open( $fh, ">", $file ) || logmsg("collect_and_export_data_to_usb_drive failed to open: $fh");
    print $fh $data;
    close $fh;
}

sub logmsg {
    my $arg = shift;
    system( "/usr/bin/logger", $arg );
}

sub build_report_id {
    my $machine_id = `cat /etc/machine-id`;
    chomp $machine_id;

    my $datestamp = `date +%Y.%-m.%-d%H%M%S`;
    chomp $datestamp;

    return join( "-", "fabmo", $machine_id, $datestamp );
}

